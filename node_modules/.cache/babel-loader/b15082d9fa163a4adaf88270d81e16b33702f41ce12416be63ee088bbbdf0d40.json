{"ast":null,"code":"import { createContext, useRef, useEffect, useContext, useState } from 'react';\nimport matchMedia from 'matchmediaquery';\nimport hyphenate from 'hyphenate-style-name';\nimport { shallowEqualObjects } from 'shallow-equal';\nimport PropTypes from 'prop-types';\nconst stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number]);\n// media types\nconst types = {\n  all: PropTypes.bool,\n  grid: PropTypes.bool,\n  aural: PropTypes.bool,\n  braille: PropTypes.bool,\n  handheld: PropTypes.bool,\n  print: PropTypes.bool,\n  projection: PropTypes.bool,\n  screen: PropTypes.bool,\n  tty: PropTypes.bool,\n  tv: PropTypes.bool,\n  embossed: PropTypes.bool\n};\n// properties that match media queries\nconst matchers = {\n  orientation: PropTypes.oneOf(['portrait', 'landscape']),\n  scan: PropTypes.oneOf(['progressive', 'interlace']),\n  aspectRatio: PropTypes.string,\n  deviceAspectRatio: PropTypes.string,\n  height: stringOrNumber,\n  deviceHeight: stringOrNumber,\n  width: stringOrNumber,\n  deviceWidth: stringOrNumber,\n  color: PropTypes.bool,\n  colorIndex: PropTypes.bool,\n  monochrome: PropTypes.bool,\n  resolution: stringOrNumber,\n  type: Object.keys(types)\n};\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst {\n  type,\n  ...featureMatchers\n} = matchers;\n// media features\nconst features = {\n  minAspectRatio: PropTypes.string,\n  maxAspectRatio: PropTypes.string,\n  minDeviceAspectRatio: PropTypes.string,\n  maxDeviceAspectRatio: PropTypes.string,\n  minHeight: stringOrNumber,\n  maxHeight: stringOrNumber,\n  minDeviceHeight: stringOrNumber,\n  maxDeviceHeight: stringOrNumber,\n  minWidth: stringOrNumber,\n  maxWidth: stringOrNumber,\n  minDeviceWidth: stringOrNumber,\n  maxDeviceWidth: stringOrNumber,\n  minColor: PropTypes.number,\n  maxColor: PropTypes.number,\n  minColorIndex: PropTypes.number,\n  maxColorIndex: PropTypes.number,\n  minMonochrome: PropTypes.number,\n  maxMonochrome: PropTypes.number,\n  minResolution: stringOrNumber,\n  maxResolution: stringOrNumber,\n  ...featureMatchers\n};\nconst all = {\n  ...types,\n  ...features\n};\nvar mq = {\n  all: all,\n  types: types,\n  matchers: matchers,\n  features: features\n};\nconst negate = cond => \"not \".concat(cond);\nconst keyVal = (k, v) => {\n  const realKey = hyphenate(k);\n  // px shorthand\n  if (typeof v === 'number') {\n    v = \"\".concat(v, \"px\");\n  }\n  if (v === true) {\n    return realKey;\n  }\n  if (v === false) {\n    return negate(realKey);\n  }\n  return \"(\".concat(realKey, \": \").concat(v, \")\");\n};\nconst join = conds => conds.join(' and ');\nconst toQuery = obj => {\n  const rules = [];\n  Object.keys(mq.all).forEach(k => {\n    const v = obj[k];\n    if (v != null) {\n      rules.push(keyVal(k, v));\n    }\n  });\n  return join(rules);\n};\nconst Context = createContext(undefined);\nconst makeQuery = settings => settings.query || toQuery(settings);\nconst hyphenateKeys = obj => {\n  if (!obj) return undefined;\n  const keys = Object.keys(obj);\n  return keys.reduce((result, key) => {\n    result[hyphenate(key)] = obj[key];\n    return result;\n  }, {});\n};\nconst useIsUpdate = () => {\n  const ref = useRef(false);\n  useEffect(() => {\n    ref.current = true;\n  }, []);\n  return ref.current;\n};\nconst useDevice = deviceFromProps => {\n  const deviceFromContext = useContext(Context);\n  const getDevice = () => hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext);\n  const [device, setDevice] = useState(getDevice);\n  useEffect(() => {\n    const newDevice = getDevice();\n    if (!shallowEqualObjects(device, newDevice)) {\n      setDevice(newDevice);\n    }\n  }, [deviceFromProps, deviceFromContext]);\n  return device;\n};\nconst useQuery = settings => {\n  const getQuery = () => makeQuery(settings);\n  const [query, setQuery] = useState(getQuery);\n  useEffect(() => {\n    const newQuery = getQuery();\n    if (query !== newQuery) {\n      setQuery(newQuery);\n    }\n  }, [settings]);\n  return query;\n};\nconst useMatchMedia = (query, device) => {\n  const getMatchMedia = () => matchMedia(query, device || {}, !!device);\n  const [mq, setMq] = useState(getMatchMedia);\n  const isUpdate = useIsUpdate();\n  useEffect(() => {\n    if (isUpdate) {\n      // skip on mounting, it has already been set\n      const newMq = getMatchMedia();\n      setMq(newMq);\n      return () => {\n        if (newMq) {\n          newMq.dispose();\n        }\n      };\n    }\n  }, [query, device]);\n  return mq;\n};\nconst useMatches = mediaQuery => {\n  const [matches, setMatches] = useState(mediaQuery.matches);\n  useEffect(() => {\n    const updateMatches = ev => {\n      setMatches(ev.matches);\n    };\n    mediaQuery.addListener(updateMatches);\n    setMatches(mediaQuery.matches);\n    return () => {\n      mediaQuery.removeListener(updateMatches);\n    };\n  }, [mediaQuery]);\n  return matches;\n};\nconst useMediaQuery = (settings, device, onChange) => {\n  const deviceSettings = useDevice(device);\n  const query = useQuery(settings);\n  if (!query) throw new Error('Invalid or missing MediaQuery!');\n  const mq = useMatchMedia(query, deviceSettings);\n  const matches = useMatches(mq);\n  const isUpdate = useIsUpdate();\n  useEffect(() => {\n    if (isUpdate && onChange) {\n      onChange(matches);\n    }\n  }, [matches]);\n  useEffect(() => () => {\n    if (mq) {\n      mq.dispose();\n    }\n  }, []);\n  return matches;\n};\n\n// ReactNode and ReactElement typings are a little funky for functional components, so the ReactElement cast is needed on the return\nconst MediaQuery = _ref => {\n  let {\n    children,\n    device,\n    onChange,\n    ...settings\n  } = _ref;\n  const matches = useMediaQuery(settings, device, onChange);\n  if (typeof children === 'function') {\n    return children(matches);\n  }\n  return matches ? children : null;\n};\nexport { Context, MediaQuery as default, toQuery, useMediaQuery };","map":{"version":3,"names":["stringOrNumber","PropTypes","oneOfType","string","number","types","all","bool","grid","aural","braille","handheld","print","projection","screen","tty","tv","embossed","matchers","orientation","oneOf","scan","aspectRatio","deviceAspectRatio","height","deviceHeight","width","deviceWidth","color","colorIndex","monochrome","resolution","type","Object","keys","featureMatchers","features","minAspectRatio","maxAspectRatio","minDeviceAspectRatio","maxDeviceAspectRatio","minHeight","maxHeight","minDeviceHeight","maxDeviceHeight","minWidth","maxWidth","minDeviceWidth","maxDeviceWidth","minColor","maxColor","minColorIndex","maxColorIndex","minMonochrome","maxMonochrome","minResolution","maxResolution","mq","negate","cond","concat","keyVal","k","v","realKey","hyphenate","join","conds","toQuery","obj","rules","forEach","push","Context","createContext","undefined","makeQuery","settings","query","hyphenateKeys","reduce","result","key","useIsUpdate","ref","useRef","useEffect","current","useDevice","deviceFromProps","deviceFromContext","useContext","getDevice","device","setDevice","useState","newDevice","shallowEqualObjects","useQuery","getQuery","setQuery","newQuery","useMatchMedia","getMatchMedia","matchMedia","setMq","isUpdate","newMq","dispose","useMatches","mediaQuery","matches","setMatches","updateMatches","ev","addListener","removeListener","useMediaQuery","onChange","deviceSettings","Error","MediaQuery","_ref","children"],"sources":["C:\\Users\\viitorgonzalez\\Documents\\Github\\extensao-1\\node_modules\\react-responsive\\src\\mediaQuery.ts","C:\\Users\\viitorgonzalez\\Documents\\Github\\extensao-1\\node_modules\\react-responsive\\src\\toQuery.ts","C:\\Users\\viitorgonzalez\\Documents\\Github\\extensao-1\\node_modules\\react-responsive\\src\\Context.ts","C:\\Users\\viitorgonzalez\\Documents\\Github\\extensao-1\\node_modules\\react-responsive\\src\\useMediaQuery.ts","C:\\Users\\viitorgonzalez\\Documents\\Github\\extensao-1\\node_modules\\react-responsive\\src\\Component.ts"],"sourcesContent":["import PropTypes from 'prop-types'\r\n\r\nconst stringOrNumber = PropTypes.oneOfType([PropTypes.string, PropTypes.number])\r\n\r\n// media types\r\nconst types = {\r\n  all: PropTypes.bool,\r\n  grid: PropTypes.bool,\r\n  aural: PropTypes.bool,\r\n  braille: PropTypes.bool,\r\n  handheld: PropTypes.bool,\r\n  print: PropTypes.bool,\r\n  projection: PropTypes.bool,\r\n  screen: PropTypes.bool,\r\n  tty: PropTypes.bool,\r\n  tv: PropTypes.bool,\r\n  embossed: PropTypes.bool\r\n}\r\n\r\n// properties that match media queries\r\nconst matchers = {\r\n  orientation: PropTypes.oneOf(['portrait', 'landscape']),\r\n\r\n  scan: PropTypes.oneOf(['progressive', 'interlace']),\r\n\r\n  aspectRatio: PropTypes.string,\r\n  deviceAspectRatio: PropTypes.string,\r\n\r\n  height: stringOrNumber,\r\n  deviceHeight: stringOrNumber,\r\n\r\n  width: stringOrNumber,\r\n  deviceWidth: stringOrNumber,\r\n\r\n  color: PropTypes.bool,\r\n\r\n  colorIndex: PropTypes.bool,\r\n\r\n  monochrome: PropTypes.bool,\r\n  resolution: stringOrNumber,\r\n  type: Object.keys(types)\r\n}\r\n\r\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\r\nconst { type, ...featureMatchers } = matchers\r\n\r\n// media features\r\nconst features = {\r\n  minAspectRatio: PropTypes.string,\r\n  maxAspectRatio: PropTypes.string,\r\n  minDeviceAspectRatio: PropTypes.string,\r\n  maxDeviceAspectRatio: PropTypes.string,\r\n\r\n  minHeight: stringOrNumber,\r\n  maxHeight: stringOrNumber,\r\n  minDeviceHeight: stringOrNumber,\r\n  maxDeviceHeight: stringOrNumber,\r\n\r\n  minWidth: stringOrNumber,\r\n  maxWidth: stringOrNumber,\r\n  minDeviceWidth: stringOrNumber,\r\n  maxDeviceWidth: stringOrNumber,\r\n\r\n  minColor: PropTypes.number,\r\n  maxColor: PropTypes.number,\r\n\r\n  minColorIndex: PropTypes.number,\r\n  maxColorIndex: PropTypes.number,\r\n\r\n  minMonochrome: PropTypes.number,\r\n  maxMonochrome: PropTypes.number,\r\n\r\n  minResolution: stringOrNumber,\r\n  maxResolution: stringOrNumber,\r\n\r\n  ...featureMatchers\r\n}\r\n\r\nconst all = { ...types, ...features }\r\n\r\nexport default {\r\n  all: all,\r\n  types: types,\r\n  matchers: matchers,\r\n  features: features\r\n}\r\n","import hyphenate from 'hyphenate-style-name'\r\nimport mq from './mediaQuery'\r\nimport { MediaQueryAllQueryable } from './types'\r\n\r\nconst negate = (cond: string) => `not ${cond}`\r\n\r\nconst keyVal = (k: string, v: unknown): string => {\r\n  const realKey = hyphenate(k)\r\n\r\n  // px shorthand\r\n  if (typeof v === 'number') {\r\n    v = `${v}px`\r\n  }\r\n  if (v === true) {\r\n    return realKey\r\n  }\r\n  if (v === false) {\r\n    return negate(realKey)\r\n  }\r\n  return `(${realKey}: ${v})`\r\n}\r\n\r\nconst join = (conds: string[]): string => conds.join(' and ')\r\n\r\nconst toQuery = (obj: Partial<MediaQueryAllQueryable>): string => {\r\n  const rules: string[] = []\r\n  Object.keys(mq.all).forEach((k) => {\r\n    const v = obj[k as keyof MediaQueryAllQueryable]\r\n    if (v != null) {\r\n      rules.push(keyVal(k, v))\r\n    }\r\n  })\r\n  return join(rules)\r\n}\r\n\r\nexport default toQuery\r\n","import { createContext } from 'react'\r\nimport { MediaQueryAllQueryable } from './types'\r\n\r\nconst Context = createContext<Partial<MediaQueryAllQueryable> | undefined>(\r\n  undefined\r\n)\r\n\r\nexport default Context\r\n","import { useRef, useEffect, useContext, useState } from 'react'\r\nimport matchMedia from 'matchmediaquery'\r\nimport hyphenate from 'hyphenate-style-name'\r\nimport { shallowEqualObjects } from 'shallow-equal'\r\nimport toQuery from './toQuery'\r\nimport Context from './Context'\r\nimport { MediaQueryAllQueryable, MediaQueryMatchers } from './types'\r\n\r\ntype MediaQuerySettings = Partial<MediaQueryAllQueryable & { query?: string }>\r\ntype HyphenateKeyTypes = MediaQueryMatchers | MediaQueryAllQueryable\r\n\r\nconst makeQuery = (settings: MediaQuerySettings) =>\r\n  settings.query || toQuery(settings)\r\n\r\nconst hyphenateKeys = (obj?: HyphenateKeyTypes) => {\r\n  type K = keyof HyphenateKeyTypes\r\n\r\n  if (!obj) return undefined\r\n  const keys = Object.keys(obj) as K[]\r\n\r\n  return keys.reduce(\r\n    (result, key) => {\r\n      result[hyphenate(key)] = obj[key]\r\n      return result\r\n    },\r\n    {} as Record<string, (typeof obj)[K]>\r\n  )\r\n}\r\n\r\nconst useIsUpdate = () => {\r\n  const ref = useRef(false)\r\n\r\n  useEffect(() => {\r\n    ref.current = true\r\n  }, [])\r\n\r\n  return ref.current\r\n}\r\n\r\nconst useDevice = (\r\n  deviceFromProps?: MediaQueryMatchers\r\n): Partial<MediaQueryAllQueryable> | undefined => {\r\n  const deviceFromContext = useContext(Context)\r\n  const getDevice = () =>\r\n    hyphenateKeys(deviceFromProps) || hyphenateKeys(deviceFromContext)\r\n  const [device, setDevice] = useState(getDevice)\r\n\r\n  useEffect(() => {\r\n    const newDevice = getDevice()\r\n    if (!shallowEqualObjects(device, newDevice)) {\r\n      setDevice(newDevice)\r\n    }\r\n  }, [deviceFromProps, deviceFromContext])\r\n\r\n  return device\r\n}\r\n\r\nconst useQuery = (settings: MediaQuerySettings) => {\r\n  const getQuery = () => makeQuery(settings)\r\n  const [query, setQuery] = useState(getQuery)\r\n\r\n  useEffect(() => {\r\n    const newQuery = getQuery()\r\n    if (query !== newQuery) {\r\n      setQuery(newQuery)\r\n    }\r\n  }, [settings])\r\n\r\n  return query\r\n}\r\n\r\nconst useMatchMedia = (query: string, device?: MediaQueryMatchers) => {\r\n  const getMatchMedia = () => matchMedia(query, device || {}, !!device)\r\n  const [mq, setMq] = useState(getMatchMedia)\r\n  const isUpdate = useIsUpdate()\r\n\r\n  useEffect(() => {\r\n    if (isUpdate) {\r\n      // skip on mounting, it has already been set\r\n      const newMq = getMatchMedia()\r\n      setMq(newMq)\r\n\r\n      return () => {\r\n        if (newMq) {\r\n          newMq.dispose()\r\n        }\r\n      }\r\n    }\r\n  }, [query, device])\r\n\r\n  return mq\r\n}\r\n\r\nconst useMatches = (mediaQuery: MediaQueryList): boolean => {\r\n  const [matches, setMatches] = useState<boolean>(mediaQuery.matches)\r\n\r\n  useEffect(() => {\r\n    const updateMatches = (ev: MediaQueryListEvent) => {\r\n      setMatches(ev.matches)\r\n    }\r\n    mediaQuery.addListener(updateMatches)\r\n    setMatches(mediaQuery.matches)\r\n\r\n    return () => {\r\n      mediaQuery.removeListener(updateMatches)\r\n    }\r\n  }, [mediaQuery])\r\n\r\n  return matches\r\n}\r\n\r\nconst useMediaQuery = (\r\n  settings: MediaQuerySettings,\r\n  device?: MediaQueryMatchers,\r\n  onChange?: (_: boolean) => void\r\n) => {\r\n  const deviceSettings = useDevice(device)\r\n  const query = useQuery(settings)\r\n  if (!query) throw new Error('Invalid or missing MediaQuery!')\r\n  const mq = useMatchMedia(query, deviceSettings)\r\n  const matches = useMatches(mq as unknown as MediaQueryList)\r\n  const isUpdate = useIsUpdate()\r\n\r\n  useEffect(() => {\r\n    if (isUpdate && onChange) {\r\n      onChange(matches)\r\n    }\r\n  }, [matches])\r\n\r\n  useEffect(\r\n    () => () => {\r\n      if (mq) {\r\n        mq.dispose()\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  return matches\r\n}\r\n\r\nexport default useMediaQuery\r\n","import useMediaQuery from './useMediaQuery'\r\nimport { ReactNode, ReactElement, FC, CSSProperties } from 'react'\r\nimport { MediaQueryAllQueryable, MediaQueryMatchers } from './types'\r\n\r\ninterface MediaQueryProps extends MediaQueryAllQueryable {\r\n  component?: ReactNode\r\n  children?: ReactNode | ((matches: boolean) => ReactNode)\r\n  query?: string\r\n  style?: CSSProperties\r\n  className?: string\r\n  device?: MediaQueryMatchers\r\n  values?: Partial<MediaQueryMatchers>\r\n  onBeforeChange?: (_matches: boolean) => void\r\n  onChange?: (_matches: boolean) => void\r\n}\r\n\r\n// ReactNode and ReactElement typings are a little funky for functional components, so the ReactElement cast is needed on the return\r\nconst MediaQuery: FC<MediaQueryProps> = ({\r\n  children,\r\n  device,\r\n  onChange,\r\n  ...settings\r\n}) => {\r\n  const matches = useMediaQuery(settings, device, onChange)\r\n\r\n  if (typeof children === 'function') {\r\n    return children(matches) as ReactElement\r\n  }\r\n  return matches ? (children as ReactElement) : null\r\n}\r\n\r\nexport default MediaQuery\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}